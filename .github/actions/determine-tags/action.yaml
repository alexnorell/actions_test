name: "Determine Image Tags"
description: "Determine Docker image tags based on inputs, version, branch, and base image name"
inputs:
  custom_tag:
    description: "Custom tag to use for the image (overrides VERSION)"
    required: false
    default: ""
  version:
    description: "Version of the image (e.g., 0.0.5, without the 'v')"
    required: true
  base_image:
    description: "Base image name for the Docker tags (e.g., 'roboflow/roboflow-inference-server-gpu')"
    required: true
  token:
    description: "GitHub token for accessing repository data"
    required: true
outputs:
  image_tags:
    description: "Comma-separated list of Docker image tags"
    value: ${{ steps.image_tags.outputs.image_tags }}
runs:
  using: "composite"
  steps:
    - name: Determine Image Tags
      shell: bash
      id: image_tags
      run: |
        # Capture inputs
        CUSTOM_TAG="${{ inputs.custom_tag }}"
        VERSION="${{ inputs.version }}"
        BASE_IMAGE="${{ inputs.base_image }}"
        TOKEN="${{ inputs.token }}"
        BRANCH="${{ github.ref_name }}"
        EVENT_NAME="${{ github.event_name }}"
        TARGET_BRANCH="${{ github.event.release.target_commitish }}"

        # Fetch the latest release tag
        if [ "$EVENT_NAME" == "release" ]; then
          LATEST_RELEASE=$(curl -s -H "Authorization: Bearer $TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name')
          echo "Fetched latest release: $LATEST_RELEASE"

          # Normalize versions: remove 'v' from the latest release tag
          NORMALIZED_LATEST_RELEASE=$(echo "$LATEST_RELEASE" | sed 's/^v//')
          echo "Normalized latest release: $NORMALIZED_LATEST_RELEASE"
        else
          LATEST_RELEASE=""
          NORMALIZED_LATEST_RELEASE=""
        fi

        # Determine the tags
        if [ -n "$CUSTOM_TAG" ]; then
          # Prepend the version to the custom tag
          CUSTOM_TAG="$VERSION-$CUSTOM_TAG"
          IMAGE_TAGS="$BASE_IMAGE:$CUSTOM_TAG"
        else
          VERSION_TAG="$BASE_IMAGE:$VERSION"
          IMAGE_TAGS="$VERSION_TAG"

          # Always update 'main' tag for commits on main
          if [ "$BRANCH" == "main" ] && [ "$EVENT_NAME" == "push" ]; then
            MAIN_TAG="$BASE_IMAGE:main"
            IMAGE_TAGS="$IMAGE_TAGS,$MAIN_TAG"
          fi

          # Add latest tag if it's a release event and this is the latest release
          if [ "$EVENT_NAME" == "release" ] && [ "$TARGET_BRANCH" == "main" ] && [ "$VERSION" == "$NORMALIZED_LATEST_RELEASE" ]; then
            LATEST_TAG="$BASE_IMAGE:latest"
            IMAGE_TAGS="$IMAGE_TAGS,$LATEST_TAG"
          fi
        fi

        # Echo the computed tags
        echo "Computed image tags: $IMAGE_TAGS"

        # Export the tags to outputs
        echo "image_tags=$IMAGE_TAGS" >> $GITHUB_OUTPUT
